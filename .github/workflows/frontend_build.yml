name: Frontend Build

on:
  workflow_call:
    inputs:
      version_type:
        description: "major | minor | patch | none"
        required: false
        type: string
      package_manager:
        description: "npm | yarn | bun"
        required: false
        default: "npm"
        type: string
      add_branch_name:
        required: false
        type: boolean
        default: true
      add_build_number:
        required: false
        type: boolean
      array_config_mode:
        description: "Frontend notification path"
        required: false
        type: string
      deploy_to_server:
        description: "Should deploy to server"
        required: false
        type: boolean
        default: false
      
    secrets:
      SSH_PRIVATE_KEY:
        required: false
      ACCESS_GITHUB_TOKEN:
        required: true
jobs:
  setup-branch:
    uses: seven-winds-studio/.github/.github/workflows/setup-branch.yml@main
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  setup-version:
    needs: [setup-branch]
    uses: seven-winds-studio/.github/.github/workflows/setup-version.yml@main
    with:
      version_type: ${{ inputs.version_type }}
      branch_name: ${{ needs.setup-branch.outputs.branch_name }}
      add_branch_name: ${{ inputs.add_branch_name }}
      add_build_number: ${{ inputs.add_build_number }}
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  setup-build:
    needs: [setup-branch, setup-version]
    uses: seven-winds-studio/.github/.github/workflows/setup-build.yml@main
    with:
      full_version: ${{ needs.setup-version.outputs.full_version }}
      package_manager: ${{ inputs.package_manager }}
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  deploy-gh:
    needs: [setup-build, setup-version, setup-branch]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-build
          path: build

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Write version to package.json and .env
        run: |
          node -e "let p=require('./package.json'); p.version='${{ needs.setup-version.outputs.full_version }}'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2));"

          touch .env
          if grep -q '^VITE_APP_VERSION=' .env; then
            sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=${{ needs.setup-version.outputs.full_version }}/" .env
          else
            echo "VITE_APP_VERSION=${{ needs.setup-version.outputs.full_version }}" >> .env
          fi

      - name: Push
        run: |
          git add -u

          if ! git diff --cached --quiet; then
            git commit -m "version: ${{ needs.setup-version.outputs.full_version }}"
          fi

          git tag -a "v${{ needs.setup-version.outputs.full_version }}" -m "version: ${{ needs.setup-version.outputs.full_version }}"

          git push origin HEAD:${{ needs.setup-branch.outputs.branch_name }}
          git push origin "v${{ needs.setup-version.outputs.full_version }}"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          publish_branch: "build_${{ needs.setup-branch.outputs.branch_name }}"
          publish_dir: build
          force_orphan: true

  matrix:
    if: inputs.deploy_to_server == true
    needs: [setup-branch]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      GIT_COMMIT: ${{ steps.git_info.outputs.GIT_COMMIT }}
      GIT_AUTHOR: ${{ steps.git_info.outputs.GIT_AUTHOR }}
      GIT_MESSAGE: ${{ steps.git_info.outputs.GIT_MESSAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate git info for matrix
        id: git_info
        run: |
          git fetch origin build_${{ needs.setup-branch.outputs.branch_name }}:build_tmp_branch
          GIT_COMMIT=$(git rev-parse build_tmp_branch)
          GIT_AUTHOR=$(git log -1 --pretty=format:'%an' build_tmp_branch)
          GIT_MESSAGE=$(git log -1 --pretty=format:'%s' build_tmp_branch)

          echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_ENV
          echo "GIT_AUTHOR=$GIT_AUTHOR" >> $GITHUB_ENV
          echo "GIT_MESSAGE=$GIT_MESSAGE" >> $GITHUB_ENV

          echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "GIT_AUTHOR=$GIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "GIT_MESSAGE=$GIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Generate config for matrix
        id: matrix
        run: |
          MATRIX_JSON='${{ inputs.array_config_mode }}'
          echo "matrix={\"include\": $MATRIX_JSON}" >> $GITHUB_OUTPUT

  deploy-server:
    needs: [setup-build, matrix]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Print full matrix
        run: echo "${{ toJson(matrix) }}"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-build
          path: build

      - name: Rsync build to server
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avz --delete --delete-excluded --exclude='.git' --exclude='.github'
          path: build/
          remote_path: ${{ matrix.frontend_mode }}
          remote_host: ${{ matrix.server_host_mode }}
          remote_user: ${{ matrix.server_user_mode }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Notify Discord on deploy failure
        if: failure()
        continue-on-error: true
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"❌ Deployment failed for \`${{ matrix.server_host_mode }}\` to \`${{ matrix.frontend_mode }}\`. Check the logs.\"}" \
            ${{ matrix.discord_hook }}

      - name: Run frontend updater on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.server_host_mode }}
          username: ${{ matrix.server_user_mode }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.frontend_mode_notification }}
            ${{ matrix.frontend_update_script }} "${{ needs.matrix.outputs.GIT_COMMIT }}" "${{ needs.matrix.outputs.GIT_AUTHOR }}" "${{ needs.matrix.outputs.GIT_MESSAGE }}"

  notify-build-failure:
    if: failure() && (needs.setup-branch.result == 'failure' || needs.setup-version.result == 'failure' || needs.setup-build.result == 'failure' || needs.matrix.result == 'failure' || needs.deploy-gh.result == 'failure')
    needs: [setup-branch, setup-version, setup-build, matrix, deploy-gh]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Print full matrix
        run: echo "${{ toJson(matrix) }}"
      - name: Notify Discord
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"❌ Build step failed on branch \`${{ github.ref_name }}\`\"}" \
            ${{ matrix.discord_hook }}
