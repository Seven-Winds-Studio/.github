name: Frontend Build

on:
  workflow_call:
    inputs:
      version_type:
        description: "major | minor | patch | none"
        required: false
        type: string
      package_manager:
        description: "npm | yarn | bun"
        required: false
        default: "npm"
        type: string
      array_config_mode:
        description: "Frontend notification path"
        required: true
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: true
      ACCESS_GITHUB_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      GIT_COMMIT: ${{ steps.git_info.outputs.GIT_COMMIT }}
      GIT_AUTHOR: ${{ steps.git_info.outputs.GIT_AUTHOR }}
      GIT_MESSAGE: ${{ steps.git_info.outputs.GIT_MESSAGE }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Setup Bun
        if: inputs.package_manager == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Clean Git
        run: |
          git reset --hard || echo "No changes to reset"
          git clean -fd || echo "No files to clean"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Configure .npmrc for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.ACCESS_GITHUB_TOKEN }}" > .npmrc
          echo "@seven-winds-studio:registry=https://npm.pkg.github.com/" >> .npmrc
          if [ -f .npmrc ]; then cp .npmrc ~/.npmrc; fi

      - name: Define version type
        id: version_type
        run: |
          echo "Version type input: ${{ inputs.version_type }}"

          if [[ -n "${{ inputs.version_type }}" ]]; then
            VERSION_TYPE="${{ inputs.version_type }}"
            echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          else
            echo "No version bump requested. Skipping versioning."
            echo "VERSION_TYPE=none" >> $GITHUB_ENV
          fi

      - name: Fetch all tags
        run: git fetch --tags

      - name: Bump version
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=""

          if [ "$VERSION_TYPE" != "none" ]; then
            # Bump version
            if [[ "$VERSION_TYPE" == "major" ]]; then
              npx standard-version --release-as major --skip.commit --skip.tag
            elif [[ "$VERSION_TYPE" == "minor" ]]; then
              npx standard-version --release-as minor --skip.commit --skip.tag
            elif [[ "$VERSION_TYPE" == "patch" ]]; then
              npx standard-version --release-as patch --skip.commit --skip.tag
            fi
            
            VERSION=$(node -p "require('./package.json').version")
            BUILD=1  # новая версия — билд сбрасываем на 1

            # Обновляем .env
            touch .env
            if grep -q "^VITE_APP_VERSION=" .env; then
              sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=$VERSION/" .env
            else
              echo "VITE_APP_VERSION=$VERSION" >> .env
            fi

          else
            # VERSION_TYPE == none — не меняем версию, берём последнюю версию из тегов
            VERSION=$(git tag --list 'v*' --sort=-creatordate | head -n 1 | sed 's/^v//' | sed 's/-.*//')
            if [ -z "$VERSION" ]; then
              VERSION="0.0.0"
            fi

            # Считаем сколько билдов уже было для этой версии и ветки
            BUILD=$(git tag | grep "^v$VERSION-$BRANCH_NAME\." | wc -l)
            BUILD=$((BUILD + 1))
          fi

          FULL_VERSION="$VERSION-$BRANCH_NAME.$BUILD"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.bun/install/cache
          key: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/bun.lockb') }}
          restore-keys: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/

      - name: Install dependencies
        env:
          BUN_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          NPM_CONFIG_USERCONFIG: ~/.npmrc
        run: |
          case "${{ inputs.package_manager }}" in
            npm)
              npm ci
              ;;
            yarn)
              corepack enable
              yarn install --frozen-lockfile
              ;;
            bun)
              bun install --no-save
              ;;
            *)
              echo "Unknown package manager: ${{ inputs.package_manager }}"
              exit 1
              ;;
          esac

      - name: Build
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Building for branch: $BRANCH_NAME"

          case "${{ inputs.package_manager }}" in
            npm)
              npm run build:$BRANCH_NAME
              ;;
            yarn)
              yarn build:$BRANCH_NAME
              ;;
            bun)
              bun run build:$BRANCH_NAME
              ;;
          esac

      - name: Push
        run: |
          git add -u

          if ! git diff --cached --quiet; then
            git commit -m "version: $FULL_VERSION"
          fi

          # Создаем тег всегда, даже если коммита не было
          git tag -a "v$FULL_VERSION" -m "version: $FULL_VERSION"

          git push origin HEAD:${{ github.ref_name }}
          git push origin "v$FULL_VERSION"

      - name: Write build info
        run: |
          COMMIT="$(git rev-parse --short HEAD)"
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "version: $FULL_VERSION" > build/build-info.txt
          echo "commit: $COMMIT" >> build/build-info.txt
          echo "date: $DATE" >> build/build-info.txt

      - name: Upload   build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: build/

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          publish_branch: "build_${{ github.ref_name }}"
          publish_dir: build
          force_orphan: true

      - name: Generate git info for matrix
        id: git_info
        run: |
          git fetch origin build_${{ github.ref_name }}:build_tmp_branch
          GIT_COMMIT=$(git rev-parse build_tmp_branch)
          GIT_AUTHOR=$(git log -1 --pretty=format:'%an' build_tmp_branch)
          GIT_MESSAGE=$(git log -1 --pretty=format:'%s' build_tmp_branch)

          echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_ENV
          echo "GIT_AUTHOR=$GIT_AUTHOR" >> $GITHUB_ENV
          echo "GIT_MESSAGE=$GIT_MESSAGE" >> $GITHUB_ENV

          echo "GIT_COMMIT=$GIT_COMMIT" >> $GITHUB_OUTPUT
          echo "GIT_AUTHOR=$GIT_AUTHOR" >> $GITHUB_OUTPUT
          echo "GIT_MESSAGE=$GIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Generate config for matrix
        id: matrix
        run: |
          MATRIX_JSON='${{ inputs.array_config_mode }}'
          echo "matrix={\"include\": $MATRIX_JSON}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build.outputs.matrix) }}
    steps:
      - name: Print full matrix
        run: echo "${{ toJson(matrix) }}"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: build

      - name: Rsync build to server
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avz --delete --delete-excluded --exclude='.git' --exclude='.github'
          path: build/
          remote_path: ${{ matrix.frontend_mode }}
          remote_host: ${{ matrix.server_host_mode }}
          remote_user: ${{ matrix.server_user_mode }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Notify Discord on deploy failure
        if: failure()
        continue-on-error: true
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"❌ Deployment failed for \`${{ matrix.server_host_mode }}\` to \`${{ matrix.frontend_mode }}\`. Check the logs.\"}" \
            ${{ matrix.discord_hook }}

      - name: Run frontend updater on server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ matrix.server_host_mode }}
          username: ${{ matrix.server_user_mode }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ matrix.frontend_mode_notification }}
            ${{ matrix.frontend_update_script }} "${{ needs.build.outputs.GIT_COMMIT }}" "${{ needs.build.outputs.GIT_AUTHOR }}" "${{ needs.build.outputs.GIT_MESSAGE }}"

  notify-build-failure:
    if: failure() && needs.build.result == 'failure'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.build.outputs.matrix) }}
    steps:
      - name: Print full matrix
        run: echo "${{ toJson(matrix) }}"
      - name: Notify Discord
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d "{\"content\": \"❌ Build step failed on branch \`${{ github.ref_name }}\`\"}" \
            ${{ matrix.discord_hook }}

